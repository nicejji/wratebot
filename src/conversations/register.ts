import { Conversation } from "@grammyjs/conversations";
import { MyContext } from "../context.js";
import { Keyboard } from "grammy";
import prisma from "../prisma.js";
import { sendProfile } from "../helpers.js";

type MyConversation = Conversation<MyContext>;

const recieveName = async (ctx: MyContext, conv: MyConversation) => {
  const keyboard = new Keyboard().resized();
  const prevName = ctx?.profile?.name;
  const tgName = ctx?.from?.first_name;
  if (prevName) keyboard.text(prevName);
  if (tgName) keyboard.text(tgName);
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è üë§", {
    reply_markup: tgName || prevName ? keyboard : { remove_keyboard: true },
  });
  while (true) {
    const name = await conv.form.text();
    if (name.length < 30) return name;
    await ctx.reply("‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 30 —Å–∏–º–≤–æ–ª–æ–≤!");
  }
};

const recieveAge = async (ctx: MyContext, conv: MyConversation) => {
  const prevAge = ctx?.profile?.age;
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç üî¢", {
    reply_markup: prevAge
      ? new Keyboard().resized().text(`${prevAge}`)
      : { remove_keyboard: true },
  });
  while (true) {
    const age = await conv.form.int();
    if (age > 15 && age < 100) return age;
    await ctx.reply("‚ö†Ô∏è –í–æ–∑—Ä–∞—Å—Ç —Å–ª–∏—à–∫–æ–º –º–∞–ª –∏–ª–∏ –≤–µ–ª–∏–∫!");
  }
};

const recieveCity = async (ctx: MyContext, conv: MyConversation) => {
  const keyboard = new Keyboard().text("–ü–æ–ª–æ—Ü–∫").text("–ù–æ–≤–æ–ø–æ–ª–æ—Ü–∫").resized();
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ üèôÔ∏è", { reply_markup: keyboard });
  while (true) {
    const city = await conv.form.text();
    if (city === "–ü–æ–ª–æ—Ü–∫" || city === "–ù–æ–≤–æ–ø–æ–ª–æ—Ü–∫") return city;
    await ctx.reply("‚ö†Ô∏è –í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!");
  }
};

const recieveBio = async (ctx: MyContext, conv: MyConversation) => {
  const keyboard = new Keyboard().text("–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ").resized();
  const prevBio = ctx?.profile?.bio;
  await ctx.reply("–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ —Å–µ–±–µ üìù", {
    reply_markup: prevBio ? keyboard : { remove_keyboard: true },
  });
  while (true) {
    const bio = await conv.form.text();
    if (bio === "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ" && prevBio) return prevBio;
    if (bio.length < 70) return bio;
    await ctx.reply("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 70 —Å–∏–º–≤–æ–ª–æ–≤.");
  }
};

const recieveIsFemale = async (ctx: MyContext, conv: MyConversation) => {
  const keyboard = new Keyboard()
    .text("–ú—É–∂—Å–∫–æ–π üôã‚Äç‚ôÇÔ∏è")
    .text("–ñ–µ–Ω—Å–∫–∏–π üôã‚Äç‚ôÄÔ∏è")
    .resized();
  await ctx.reply("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª", { reply_markup: keyboard });
  while (true) {
    const gender = await conv.form.text();
    if (gender === "–ú—É–∂—Å–∫–æ–π üôã‚Äç‚ôÇÔ∏è" || gender === "–ñ–µ–Ω—Å–∫–∏–π üôã‚Äç‚ôÄÔ∏è")
      return gender === "–ñ–µ–Ω—Å–∫–∏–π üôã‚Äç‚ôÄÔ∏è";
    await ctx.reply("–í—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!");
  }
};

const recievePhotos = async (ctx: MyContext, conv: MyConversation) => {
  const photos: string[] = [];
  const keyboard = new Keyboard().resized().text("–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ").oneTime();
  const prevPhotos = ctx?.profile?.photos;
  await ctx.reply("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ —Ñ–æ—Ç–æ üì∑", {
    reply_markup: prevPhotos ? keyboard : { remove_keyboard: true },
  });
  while (true) {
    const photosCtx = await conv.waitFor([":photo", ":text"]);
    const text = photosCtx?.msg?.text;
    const photo = photosCtx?.msg?.photo;
    if (text === "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ" && prevPhotos) return prevPhotos;
    if (photos.length && text === "–≠—Ç–æ –≤—Å–µ, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ‚úÖ") return photos;
    if (!photo) {
      await ctx.reply("–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ!");
      continue;
    }
    photos.push(photo[0].file_id);
    if (photos.length > 2) return photos;
    const keyboard = new Keyboard()
      .text("–≠—Ç–æ –≤—Å–µ, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ‚úÖ")
      .oneTime()
      .resized();
    if (prevPhotos) keyboard.text("–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ");
    await ctx.reply(`‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${photos.length}/3`, {
      reply_markup: keyboard,
    });
  }
};

export const register = async (
  conversation: MyConversation,
  ctx: MyContext
) => {
  const userData = {
    name: await recieveName(ctx, conversation),
    age: await recieveAge(ctx, conversation),
    city: await recieveCity(ctx, conversation),
    bio: await recieveBio(ctx, conversation),
    isFemale: await recieveIsFemale(ctx, conversation),
    photos: await recievePhotos(ctx, conversation),
  };
  const profile = await prisma.user.upsert({
    where: { tgId: ctx.from.id },
    update: userData,
    create: { tgId: ctx.from.id, ...userData },
  });
  await ctx.reply("üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:");
  await sendProfile(ctx, profile);
};
