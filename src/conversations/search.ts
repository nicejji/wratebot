import { User } from "@prisma/client";
import { Keyboard } from "grammy";
import { sendProfile } from "../helpers.js";
import prisma from "../prisma.js";
import { Context, Conversation } from "../types.js";

const findCandidate = async (forUser: User) => {
  const extendedUser = await prisma.user.findUnique({
    where: { tgId: forUser.tgId },
    include: { sentGrades: true, recievedGrades: true },
  });
  const excludeIds = [
    ...extendedUser.sentGrades.map((g) => g.toId),
    ...extendedUser.recievedGrades.map((g) => g.fromId),
    forUser.tgId,
  ];
  return await prisma.user.findFirst({
    where: { tgId: { notIn: excludeIds }, isFemale: !forUser.isFemale },
    orderBy: {
      _relevance: { fields: ["city"], search: forUser.city, sort: "asc" },
    },
  });
};

const rateKeyboard = new Keyboard()
  .resized()
  .text("‚ù§Ô∏è")
  .text("üëé")
  .row()
  .text("‚¨ÖÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç.");

const recieveIsLike = async (ctx: Context, conv: Conversation) => {
  while (true) {
    const reaction = await conv.form.text();
    if (reaction === "‚¨ÖÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç.") return null;
    if (reaction === "‚ù§Ô∏è" || reaction === "üëé") return reaction === "‚ù§Ô∏è";
    await ctx.reply("–ù–µ—Ç —Ç–∞–∫–æ–π –æ–ø—Ü–∏–∏!");
  }
};

export const search = async (conversation: Conversation, ctx: Context) => {
  await ctx.reply("üîé –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ...", { reply_markup: rateKeyboard });
  while (true) {
    const candidate = await findCandidate(ctx.profile);
    if (!candidate) {
      await ctx.reply("‚ö†Ô∏è –í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!", {
        reply_markup: { remove_keyboard: true },
      });
      break;
    }
    await sendProfile(ctx, candidate);
    const isLike = await recieveIsLike(ctx, conversation);
    if (isLike === null) {
      await ctx.reply("–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç ‚úÖ", {
        reply_markup: { remove_keyboard: true },
      });
      return;
    }
    const grade = await prisma.grade.create({
      data: { fromId: ctx.from.id, toId: candidate.tgId, isLike },
    });
    if (grade.isLike) {
      const toId = Number(candidate.tgId);
      await ctx.api.sendMessage(toId, "‚ù§Ô∏è –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π –ª–∞–π–∫!");
    }
  }
};
