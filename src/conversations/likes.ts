import { User } from "@prisma/client";
import { Keyboard } from "grammy";
import { escapeMarkdown, sendProfile } from "../helpers.js";
import prisma from "../prisma.js";
import { Context, Conversation } from "../types.js";

const rateKeyboard = new Keyboard()
  .resized()
  .text("‚ù§Ô∏è")
  .text("üëé")
  .text("‚¨ÖÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç.");

const recieveIsLike = async (ctx: Context, conv: Conversation) => {
  while (true) {
    const reaction = await conv.form.text();
    if (reaction === "‚¨ÖÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç.") return null;
    if (reaction === "‚ù§Ô∏è" || reaction === "üëé") return reaction === "‚ù§Ô∏è";
    await ctx.reply("–ù–µ—Ç —Ç–∞–∫–æ–π –æ–ø—Ü–∏–∏!");
  }
};

const getLikers = async (user: User) => {
  return (
    await prisma.user.findUnique({
      where: { tgId: user.tgId },
      include: { recievedGrades: { include: { from: true } } },
    })
  ).recievedGrades
    .filter((grade) => grade.isLike && !grade.isMatch)
    .map((grade) => grade.from);
};

export const likes = async (conversation: Conversation, ctx: Context) => {
  const profiles = await getLikers(ctx.profile);
  if (!profiles.length) {
    await ctx.reply("‚ö†Ô∏è –í—Å–µ –ª–∞–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!");
    return;
  }
  await ctx.reply("‚ù§Ô∏è  –í–∞–º –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", {
    reply_markup: rateKeyboard,
  });
  for (const profile of profiles) {
    await sendProfile(ctx, profile);
    const isMatch = await recieveIsLike(ctx, conversation);
    if (isMatch === null) {
      await ctx.reply("–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç ‚úÖ", {
        reply_markup: { remove_keyboard: true },
      });
      return;
    }
    const grade = await prisma.grade.update({
      where: { fromId_toId: { fromId: profile.tgId, toId: ctx.profile.tgId } },
      data: { isMatch },
    });
    if (grade.isMatch) {
      await ctx.reply(
        `–û—Ç–ª–∏—á–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è üëâ [${escapeMarkdown(
          profile.name
        )}](https://t.me/${profile.username})`,
        {
          parse_mode: "MarkdownV2",
        }
      );
      await sendProfile(ctx, ctx.profile, profile.tgId);
      await ctx.api.sendMessage(
        profile.tgId,
        `–ï—Å—Ç—å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è üëâ [${escapeMarkdown(
          ctx.profile.name
        )}](https://t.me/${ctx.profile.username})`,
        { parse_mode: "MarkdownV2" }
      );
    }
  }
  await ctx.reply("‚úÖ –í—Å–µ –ª–∞–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!", {
    reply_markup: { remove_keyboard: true },
  });
};
